{"version":3,"sources":["train.js","piano.js","results.js","settings.js","ToneGenerator.js","App.js","serviceWorker.js","index.js"],"names":["TrainData","note_stack","guess_stack","result_stack","start","this","addGuess","bind","addNote","calcScore","note","length","unshift","note_arr","i","console","log","score","Math","round","WhiteNote","props","className","onClick","e","onNoteClick","name","BlackNote","Piano","PianoPhone","ResultItem","index","guess","result","Results","notes","slice","guesses","results","map","guess_note","key","Settings","to","rand","num","floor","random","ToneGen","num_notes","max_leap","mode","synth","int_note_arr","prev_note_index","prev_note","Tone","Synth","toMaster","random_note","play_note","play_rand_note","array","rand_array","prev_val","x1","x2","allowed_notes","duration","triggerAttackRelease","gap","time","trainData","toneGen","PlayView","useState","setNote","onStart","ui","TrainView","setNotes","setGuess","setResult","replay","play_notes","play_rand_seq","addNoteArr","guessed","ResultsView","App","state","range","swapUI","setState","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.35fa76e3.chunk.js","sourcesContent":["import './App.css';\r\n\r\nclass TrainData {\r\n\r\n  note_stack = [];\r\n  guess_stack = [];\r\n  result_stack = [];\r\n  start = false;\r\n\r\n  constructor() {\r\n    this.addGuess  = this.addGuess.bind(this);\r\n    this.addNote   = this.addNote.bind(this);\r\n    this.calcScore = this.calcScore.bind(this);\r\n  }\r\n\r\n  addNote(note) {\r\n    while (this.guess_stack.length !== this.note_stack.length) {\r\n      this.guess_stack.unshift('-');\r\n    }\r\n    this.note_stack.unshift(note);\r\n  }\r\n\r\n  addNoteArr(note_arr) {\r\n    while (this.guess_stack.length !== this.note_stack.length) {\r\n      this.guess_stack.unshift('-');\r\n    }\r\n    for (var i in note_arr) {\r\n      // console.log(\"note: \" + note_arr[i]);\r\n      this.note_stack.unshift(note_arr[i]);\r\n    }\r\n  }\r\n\r\n  addGuess(note) {\r\n    if (this.guess_stack.length !== this.note_stack.length) {\r\n      // console.log(\"guess:\" + note + \" : \" + this.note_stack.length - this.guess_stack.length)\r\n      console.log(this.note_stack)\r\n      this.guess_stack.unshift(note)\r\n      this.result_stack.unshift(\r\n        // note the weird index- this is because we're working with a stack, and we may have\r\n        // added PAST the note we're comparing to, so we need to look at an index in the note stack\r\n        note === this.note_stack[this.note_stack.length - this.guess_stack.length]\r\n      );\r\n    }\r\n    else {\r\n      console.log(\"wrong length\");\r\n    }\r\n    return (this.result_stack[0]);\r\n  }\r\n  \r\n  calcScore() {\r\n    var score = 0;\r\n    for (let i = 0; i < this.note_stack.length; ++i) {\r\n      if (i < this.guess_stack.length)\r\n        if (this.note_stack[i] === this.guess_stack[i])\r\n          ++score;\r\n    }\r\n    if (score === 0)\r\n      return [0,0];\r\n    return [score, Math.round(100 * (score / this.note_stack.length))];\r\n  }\r\n}\r\n\r\nexport default TrainData;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction WhiteNote(props) {\r\n  return (\r\n    <div \r\n        className=\"key\" \r\n        onClick={(e) => props.onNoteClick(props.name)}>\r\n      {/* {props.name} */}\r\n    </div>\r\n  );\r\n}\r\nfunction BlackNote(props) {\r\n  return (\r\n    <div \r\n        className=\"key black\" \r\n        onClick={(e) => props.onNoteClick(props.name)}>\r\n      {/* {props.name} */}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Piano(props) {\r\n  return (\r\n  <div className=\"piano\">\r\n    <WhiteNote name={'C4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'C#4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'D4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Eb4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'E4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'F4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'F#4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'G4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Ab4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'A4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Bb4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'B4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'C5'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'C#5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'D5'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Eb5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'E5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'F5'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'F#5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'G5'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Ab5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'A5'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Bb5'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'B5'} onNoteClick={props.onNoteClick} />\r\n      <WhiteNote name={'C6'} onNoteClick={props.onNoteClick} />\r\n  </div>\r\n  );\r\n}\r\n\r\nfunction PianoPhone(props) {\r\n  return (\r\n  <div className=\"piano phone\">\r\n    <WhiteNote name={'C4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'C#4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'D4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Eb4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'E4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'F4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'F#4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'G4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Ab4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'A4'} onNoteClick={props.onNoteClick} />\r\n      <BlackNote name={'Bb4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'B4'} onNoteClick={props.onNoteClick} />\r\n    <WhiteNote name={'C5'} onNoteClick={props.onNoteClick} />\r\n  </div>\r\n  );\r\n}\r\n\r\n\r\nexport {Piano, PianoPhone};\r\nexport default Piano;","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction getResult(result) {\r\n    if (result)\r\n        return '\\u2713'; // unicode checkmark\r\n    else\r\n        return 'X';\r\n}\r\n\r\nfunction ResultItem(props) {\r\n  return(\r\n    <tr>\r\n      <th className='Results-table-cell'>{props.index}.</th>\r\n      <th className='Results-table-cell'>{props.guess}</th>\r\n      <th className='Results-table-cell'>{props.note}</th>\r\n      <th className='Results-table-cell'>{getResult(props.result)}</th>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction Results(props) {\r\n  // if the lengths aren't the same, we need to offset notes, otherwise we'll print the wrong stuff\r\n  // this has no effec if guesses.length === notes.length\r\n  var notes = props.notes.slice(props.notes.length - props.guesses.length, props.notes.length);\r\n\r\n  return (\r\n    <div className=\"App App-header\">\r\n      <h2>Score: {props.score[1]}% ({props.score[0]} / {props.results.length})</h2>\r\n      <table className='Results-table'>\r\n        <thead>\r\n          <tr>\r\n            <th className='Results-table-cell'/>\r\n            <th className='Results-table-cell'>Guess</th>\r\n            <th className='Results-table-cell'>Note</th>\r\n            <th className='Results-table-cell'>Result</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.guesses\r\n            .map(\r\n              (guess, index) => (\r\n                [guess, notes[index], props.results[index]]\r\n              )\r\n            ).map(\r\n              (guess_note, index) => ( \r\n                <ResultItem \r\n                    key={index} \r\n                    index={props.guesses.length - index}\r\n                    guess={guess_note[0]} \r\n                    note={guess_note[1]} \r\n                    result={guess_note[2]}\r\n                />\r\n              )\r\n            )\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\nfunction Settings() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Settings</h1>\r\n      <p>\r\n        <NavLink to='/'>\r\n          <button className=\"App-button colorGreen\">Home</button>\r\n        </NavLink>\r\n        <NavLink to='/train'>\r\n          <button className=\"App-button colorCoral\">Start Training</button>\r\n        </NavLink>\r\n      </p>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import Tone from 'tone';\r\n                // 0    1       2     3     4     5     6       7     8     9     10      11  \r\nconst note_arr = ['C4', 'C#4', 'D4', 'Eb4', 'E4', 'F4', 'F#4', 'G4', 'Ab4', 'A4', 'Bb4', 'B4',\r\n                // 12   13      14    15    16    17    18     19    20     21    22      22\r\n                  'C5', 'C#5', 'D5', 'Eb5', 'E5', 'F5', 'F#5', 'G5', 'Ab5', 'A5', 'Bb5', 'B5',\r\n                // 23\r\n                  'C6'];\r\n\r\nfunction rand(num) {\r\n  return Math.floor(Math.random() * num);\r\n}\r\n\r\n// scan through the array the get the notes that are allowed (in the interval)\r\nfunction allowed_notes(array, prev_val, max_leap) {\r\n  var i = 0;\r\n  var x1;\r\n  var x2;\r\n  // this is guaranteed to not go off the end of the array\r\n  while (array[i] < prev_val - max_leap) {\r\n    ++i;\r\n  }\r\n  x1 = i;\r\n  while (i < array.length && array[i] < prev_val + max_leap) {\r\n    ++i\r\n  }\r\n  x2 = i;\r\n  return array.slice(x1,x2+1);\r\n}\r\nfunction rand_array(array) {\r\n  return array[rand(array.length)]\r\n}\r\n// return a number in the range\r\n//  [max(min_val, prev_val-max_leap), min(max_val, prev_val+max_leap)]\r\n// (end values inclusive)\r\nfunction rand_leap_between(array, prev_val, max_leap, max_val, min_val = 0) {\r\n  var n1 = array[prev_val] - max_leap;\r\n  var n2 = array[prev_val] + max_leap\r\n\r\n  // return an array with every element +- max_leap distance away from prev_note_index\r\n  // random number between x1 .. x2\r\n  var x1 = Math.max(min_val, prev_val - max_leap);\r\n  var x2 = Math.min(prev_val + max_leap, max_val);\r\n  return x1 + Math.floor(Math.random() * (x2 - x1 + 1));\r\n}\r\n/*\r\nThis is a stateless, non-rendering tone generate. It does one thing: plays notes \r\n*/\r\nclass ToneGen {\r\n  \r\n  int_note_arr = [];\r\n  max_leap;\r\n  num_notes;\r\n  prev_note_index = -1;\r\n  prev_note = -1;\r\n\r\n  constructor(\r\n      num_notes = 3, \r\n      max_leap = 3, \r\n      mode = \"major\", \r\n      synth = {\r\n        \"oscillator\" : {\r\n          \"type\" : \"triangle\"\r\n        },\r\n        \"envelope\" : {\r\n          \"attackCurve\" : \"exponential\",\r\n          \"attack\" : 0.02,\r\n          \"decayCurve\" : \"exponential\",\r\n          \"decay\" : 0.01,\r\n          \"sustain\" : 0.2,\r\n          \"releaseCurve\" : \"exponential\",\r\n          \"release\" : 0.4,\r\n        },\r\n        \"portamento\" : 0.0,\r\n        \"volume\" : -12\r\n      }\r\n    ) \r\n  {\r\n    this.synth = new Tone.Synth(synth).toMaster();\r\n    // this.synth = new Tone.Synth(new Tone.Oscillator({type: \"triangle\"}), synth).toMaster();;\r\n    // this.synth.volume.value = -4;\r\n\r\n    switch (mode) {\r\n      case \"major\" : this.int_note_arr = [0,2,4,5,7,9,11,12]; // [C, C#, D, E, F, F#, A, B, C]\r\n        break;\r\n      case \"minor\" : this.int_note_arr = [1,2,3,5,7,8,10,11,12];\r\n        break;\r\n    }\r\n    this.max_leap = max_leap;\r\n    this.num_notes = num_notes;\r\n\r\n    this.random_note = this.random_note.bind(this);\r\n    this.play_note = this.play_note.bind(this);\r\n    this.play_rand_note = this.play_rand_note.bind(this);\r\n  }\r\n\r\n  random_note() {\r\n    // sentinel: no previous note exists\r\n    if (this.prev_note === -1) {\r\n      this.prev_note = this.int_note_arr[rand(this.int_note_arr.length)]\r\n      return note_arr[this.prev_note];\r\n    } else {\r\n      // console.log(\"rand_note: \", this.prev_note_index, this.max_leap, this.int_note_arr.length);\r\n      // this.prev_note_index = rand_leap_between(this.prev_note_index, this.max_leap, this.int_note_arr.length - 1);\r\n      // console.log(\"note:\", this.prev_note_index, note_arr[this.int_note_arr[this.prev_note_index]])\r\n      this.prev_note = rand_array(allowed_notes(this.int_note_arr, this.prev_val, this.max_leap))\r\n      return note_arr[this.prev_note];\r\n    }\r\n  }\r\n\r\n  play_note(note, duration='4n') {\r\n    //play the note for the duration of an quarter note\r\n    this.synth.triggerAttackRelease(note, duration);\r\n  }\r\n  \r\n  play_notes(note_arr, duration='4n', gap=1) {\r\n    var time = 0.25\r\n    for (let i = 0; i < note_arr.length; ++i) {\r\n      this.synth.triggerAttackRelease(note_arr[i], duration, \"+\"+time);\r\n      time += gap;\r\n    }\r\n  }\r\n\r\n  play_rand_note(duration='4n') {\r\n    var note = this.random_note(duration);\r\n    this.play_note(note);\r\n    return note;\r\n  }\r\n\r\n  play_rand_seq(duration='4n', gap=1) {\r\n    var note_arr = []\r\n    var time = 0.25\r\n    for (let i = 0; i < this.num_notes; ++i) {\r\n      note_arr[i] = this.random_note();\r\n      // console.log(note_arr[i]);\r\n      this.synth.triggerAttackRelease(note_arr[i], duration, \"+\"+time);\r\n      time += gap;\r\n    }\r\n    return note_arr;\r\n  }\r\n}\r\n\r\nexport default ToneGen;","import React, { useState } from 'react';\nimport { BrowserRouter, Link, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport TrainData from './train.js';\nimport {Piano , PianoPhone} from './piano.js';\nimport Results from './results.js';\nimport Settings from './settings.js';\nimport ToneGen from './ToneGenerator';\n\nvar trainData = new TrainData();\nvar toneGen = null;\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ui : \"piano\",\n      range: 2,\n      duration: '4n',\n      num: 3,\n      gap: 1\n    }\n\n    this.onStart = this.onStart.bind(this);\n    this.swapUI = this.swapUI.bind(this);\n  }\n\n  onStart() {\n    console.log(\"resetting train data\");\n    trainData = new TrainData();\n    toneGen = new ToneGen();\n  }\n\n  swapUI() {\n    if (this.state.range === 1) {\n      this.setState({range : 2});\n      console.log(this.state);\n    }\n    else if (this.state.range === 2) {\n      this.setState({range : 1});\n      console.log(this.state);\n    }\n  }\n\n  render() {\n    var ui;\n    if (this.state.ui === \"piano\") {\n      if (this.state.range === 1) {\n        ui = PianoPhone;\n      }\n      else {\n        ui = Piano;\n      }\n    }\n    return(\n    <header className=\"App App-header\">\n      <h1>Aural Training</h1> \n      <button onClick={(e) => this.swapUI()}>UI</button>\n      <BrowserRouter>\n        <Switch>\n          <Route path='/settings'>\n            <Settings />\n          </Route>\n          <Route path='/results'>\n            <ResultsView \n              trainData={trainData}\n            />\n          </Route>\n          <Route path='/train'> \n            <TrainView \n              trainData={trainData} \n              replay={true} \n              ui={ui}\n              range={this.state.range}\n              duration={this.state.duration}\n              num={this.state.num}\n              gap={this.state.gap}\n            /> \n          </Route>\n          <Route path='/'> \n            <PlayView \n              onStart={this.onStart} \n              ui={ui}\n              range={this.state.range}\n              duration={this.state.duration}\n              num={this.state.num}\n              gap={this.state.gap}\n            />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </header>\n  );}\n}\n\nfunction PlayView (props) {\n  // react hooks!\n  const [note, setNote] = useState('');\n  \n  return (\n  <div>\n    <p>\n      <Link to='/train'>\n        <button className=\"App-button colorGreen\" onClick={props.onStart}>Start</button>\n      </Link>\n      <Link to='/settings'>\n        <button className=\"App-button colorCoral\">Settings</button>\n      </Link>\n      <Link to='/results'>\n        <button className=\"App-button colorYellow\">Results</button>\n      </Link>\n    </p>\n    <div>\n      <p>Play a Note:</p>\n      <props.ui \n        onNoteClick = {(note) => {\n          console.log(note);\n          // need to do it this way so that the AudioContext is created by the user\n          // for Chrome\n          if (toneGen === null) {\n            toneGen = new ToneGen()\n          }\n          toneGen.play_note(note); \n          setNote(note)}\n        }\n      />\n      <p>Note Played:</p>\n      <p>{note}</p>\n    </div>\n  </div>\n  );\n}\n\nfunction TrainView (props) {\n  const [notes, setNotes] = useState('');\n  const [guess, setGuess] = useState('');\n  const [result, setResult] = useState(null);\n  // const toneGen = new ToneGen();\n  return (\n    <div>\n      <p>\n        <Link to='/'>\n          <button className=\"App-button colorGreen\">Stop</button>\n        </Link>\n        <Link to='/settings'>\n          <button className=\"App-button colorCoral\">Settings</button>\n        </Link>\n        <Link to='/results'>\n          <button className=\"App-button colorYellow\">Results</button>\n        </Link>\n      </p>\n      <div className=\"App\">\n        <div>\n          {props.replay && \n              <button className=\"App-button colorYellow\"\n                  onClick={(e) => {\n                    if (toneGen !== null) {\n                      console.log(\"replay:\", notes);\n                      toneGen.play_notes(notes, props.duration, props.gap)\n                    }\n                  }}>\n                Replay\n              </button>\n            }\n            <button className=\"App-button colorGreen\"\n                onClick={(e) => {\n                  // need to do it this way so that the AudioContext is created by the user\n                  // for Chrome\n                  if (toneGen === null) {\n                    toneGen = new ToneGen()\n                  }\n                  var note_arr = toneGen.play_rand_seq(props.duration, props.gap)\n                  setNotes(note_arr);\n                  console.log(note_arr)\n                  trainData.addNoteArr(note_arr);\n                }}>\n              Next Note\n            </button>\n          </div>\n          <props.ui\n            onNoteClick = {(note) => {\n              if (!trainData.guessed) {\n                setGuess(note);\n              }\n              setResult(trainData.addGuess(note));\n            }}\n          />\n        <p>You Guessed:</p>\n        <p>{guess}{result === null ? '' : (result ? ' : Correct' : ' : Incorrect')}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction ResultsView (props) {\n  return (\n    <div> \n    <p>\n      <Link to='/'>\n        <button className=\"App-button colorGreen\">Start Over</button>\n      </Link>\n      <Link to='/settings'> \n        <button className=\"App-button colorCoral\">Settings</button>\n      </Link>\n      <Link to='/train'>\n        <button className=\"App-button colorYellow\">\n          Continue\n        </button>\n      </Link>\n    </p>\n    <Results\n        guesses = {trainData.guess_stack}\n        notes   = {trainData.note_stack}\n        results = {trainData.result_stack}\n        score   = {trainData.calcScore()}\n    />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ), document.getElementById('root')\n);\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}