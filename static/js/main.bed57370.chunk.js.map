{"version":3,"sources":["results.js","train.js","ToneGenerator.js","piano.js","settings.js","App.js","serviceWorker.js","index.js"],"names":["ResultItem","props","className","index","guess","note","result","Results","this","score","notes","length","guesses","map","results","guess_note","key","React","Component","TrainingData","note_stack","guess_stack","result_stack","guessed","start","isCorrect","bind","addResult","addGuess","addNote","calcScore","unshift","i","Math","round","TrainingSession","state","train_data","onNoteChange","onGuessChange","onPlay","onStart","onContinue","onResults","value","setState","mode","res","setMode","ui","synth","Synth","toMaster","note_arr","ToneGen","floor","random","console","log","triggerAttackRelease","play_note","random_note","NoteButton","color","onClick","e","handleClick","name","NoteButtons","Piano","handleGuess","handlePlay","handleNext","handleRnd","toneGen","play_note_button","play_rand_note","button_click","message","next","next_message","Settings","to","App","PlayView","TrainView","UNSAFE_componentWillMount","ResultsView","Main","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.bed57370.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nfunction getResult(result) {\r\n    if (result)\r\n        return '\\u2713'; // unicode checkmark\r\n    else\r\n        return 'X';\r\n}\r\n\r\nfunction ResultItem(props) {\r\n  return(\r\n    <tr>\r\n      <th className='Results-table-cell'>{props.index}.</th>\r\n      <th className='Results-table-cell'>{props.guess}</th>\r\n      <th className='Results-table-cell'>{props.note}</th>\r\n      <th className='Results-table-cell'>{getResult(props.result)}</th>\r\n    </tr>\r\n  );\r\n}\r\n\r\nclass Results extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>Score: {this.props.score[1]}% ({this.props.score[0]} / {this.props.notes.length})</h2>\r\n        <table className='Results-table'>\r\n          <thead>\r\n            <tr>\r\n              <th className='Results-table-cell'/>\r\n              <th className='Results-table-cell'>Guess</th>\r\n              <th className='Results-table-cell'>Note</th>\r\n              <th className='Results-table-cell'>Result</th>\r\n            </tr>\r\n          </thead>\r\n        <tbody>\r\n          {this.props.guesses.map((guess, index) => (\r\n            [guess, this.props.notes[index], this.props.results[index]]\r\n            )).map((guess_note, index) => ( \r\n            <ResultItem \r\n                key={index} \r\n                index={this.props.guesses.length - index}\r\n                guess={guess_note[0]} \r\n                note={guess_note[1]} \r\n                result={guess_note[2]}\r\n            />\r\n          ))}\r\n        </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport './App.css';\r\nimport { Link, Switch, Route } from 'react-router-dom';\r\n\r\nimport Results from './results.js';\r\n\r\nclass TrainingData {\r\n  note_stack = [];\r\n  guess_stack = [];\r\n  result_stack = [];\r\n  \r\n  guessed = false;\r\n  start = false;\r\n\r\n  constructor() {\r\n    this.isCorrect = this.isCorrect.bind(this);\r\n    this.addResult = this.addResult.bind(this);\r\n    this.addGuess = this.addGuess.bind(this);\r\n    this.addNote = this.addNote.bind(this);\r\n    this.calcScore = this.calcScore.bind(this);\r\n  }\r\n\r\n  isCorrect() {\r\n    if (this.guessed) \r\n      return false;\r\n    this.guessed = true;\r\n    \r\n    return (this.note_stack[0] === this.guess_stack[0]) ;\r\n  }\r\n  addResult() {\r\n    this.result_stack.unshift(this.isCorrect());\r\n  }\r\n  addGuess(note) {\r\n    if (!this.guessed)\r\n      this.guess_stack.unshift(note);\r\n    else\r\n      this.guess_stack[0] = note;\r\n    this.addResult();\r\n  }\r\n  addNote(note) {\r\n    if (!this.guessed && this.start) {\r\n      this.guess_stack.unshift('-');\r\n      this.result_stack.unshift(false);\r\n    }\r\n    this.start = true;\r\n    this.guessed = false;\r\n    this.note_stack.unshift(note);\r\n  }\r\n  calcScore() {\r\n    var score = 0;\r\n    for (let i=0; i < this.note_stack.length; ++i) {\r\n      if (i < this.guess_stack.length)\r\n        if (this.note_stack[i] === this.guess_stack[i])\r\n          ++score;\r\n    }\r\n    if (score === 0)\r\n      return [0,0];\r\n    return [score, Math.round(100 * (score / this.note_stack.length))];\r\n  }\r\n}\r\n\r\nclass TrainingSession extends React.Component{\r\n  note_stack = [];\r\n  guess_stack = [];\r\n  result_stack = [];\r\n\r\n  guessed = false;\r\n  start = false;\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      note: '',\r\n      guess: '',\r\n      result: ''\r\n    }\r\n    this.train_data = new TrainingData();\r\n    if (props.train_data != null) \r\n      this.train_data = props.train_data;\r\n    this.onNoteChange = this.onNoteChange.bind(this);\r\n    this.onGuessChange = this.onGuessChange.bind(this);\r\n    this.onPlay = this.onPlay.bind(this);\r\n    this.onStart = this.onStart.bind(this);\r\n    this.onContinue = this.onContinue.bind(this);\r\n    this.onResults = this.onResults.bind(this);\r\n  }\r\n  onNoteChange(value) {\r\n    this.train_data.addNote(value);\r\n    this.setState({note: value});\r\n  }\r\n  onGuessChange(value) {\r\n    if (this.train_data.guessed)\r\n      return;\r\n    this.train_data.addGuess(value);\r\n    this.setState({guess: value});\r\n    if (this.props.mode === 'guess') {\r\n      var res = this.train_data.result_stack[0] ? ' : Correct' : ' : Incorrect';\r\n      this.setState({result: res});\r\n    }\r\n  }\r\n  onPlay() {\r\n    this.train_data = new TrainingData();\r\n    this.setState({\r\n      note: '',\r\n      guess: '',\r\n      result: ''\r\n    });\r\n    this.props.setMode('play');\r\n  }\r\n  onStart() {\r\n    this.train_data = new TrainingData();\r\n    this.setState({\r\n      note: '',\r\n      guess: '',\r\n      result: ''\r\n    });\r\n    this.props.setMode('guess');\r\n  }\r\n  onContinue() {\r\n    this.props.setMode('guess');\r\n  }\r\n  onResults() {\r\n    this.props.setMode('results');\r\n  }\r\n  render() {\r\n    if (this.props.mode === 'play') {\r\n      return(\r\n      // <header className=\"App-header\">\r\n      //   <h1>Aural Training</h1> \r\n      //   <p>\r\n      //     <Link to='/train'>\r\n      //       <button className=\"App-button colorGreen\" onClick={this.onStart}>\r\n      //       Start\r\n      //       </button>\r\n      //     </Link>\r\n      //     <Link to='/settings'>\r\n      //       <button className=\"App-button colorCoral\">Settings</button>\r\n      //     </Link>\r\n      //   </p>\r\n      //   <p>Play a note!</p>\r\n        <this.props.ui \r\n          onResults={this.onResults}\r\n          onNoteChange={this.onNoteChange}\r\n          onGuessChange={this.onGuessChange}\r\n          note={this.state.note}\r\n          guess={this.state.guess}\r\n          result={this.state.result}\r\n          mode={this.props.mode}\r\n        />\r\n      // </header>\r\n      );\r\n    }\r\n    else if (this.props.mode === 'guess') {\r\n      return(\r\n      // <header className=\"App-header\">\r\n      //   <h1>Aural Training</h1> \r\n      //   <p>\r\n      //     <Link to='/'>\r\n      //       <button className=\"App-button colorGreen\" onClick={this.onPlay}>Stop</button>\r\n      //     </Link>\r\n      //     <Link to='/settings'>\r\n      //       <button className=\"App-button colorCoral\">Settings</button>\r\n      //     </Link>\r\n      //     <Link to='/results'>\r\n      //       <button className=\"App-button colorYellow\" onClick={this.onResults}>\r\n      //         Results\r\n      //       </button>\r\n      //     </Link>\r\n      //   </p>\r\n      //   <p>What Note Just Played?</p>\r\n        <this.props.ui \r\n          onResults={this.onResults}\r\n          onNoteChange={this.onNoteChange}\r\n          onGuessChange={this.onGuessChange}\r\n          note={this.state.note}\r\n          guess={this.state.guess}\r\n          result={this.state.result}\r\n          mode={this.props.mode}\r\n        />\r\n      // </header>\r\n      );\r\n    }\r\n    // else if (this.props.mode === 'results') {\r\n    //   return(\r\n    //     <header className=\"App-header\">\r\n    //       <h1>Results</h1> \r\n    //       <p>\r\n    //         <Link to='/'>\r\n    //           <button className=\"App-button colorGreen\" onClick={this.onPlay}>Start Over</button>\r\n    //         </Link>\r\n    //         <Link to='/settings'> \r\n    //           <button className=\"App-button colorCoral\">Settings</button>\r\n    //         </Link>\r\n    //         <Link to='/train'>\r\n    //           <button className=\"App-button colorYellow\" onClick={this.onContinue}>\r\n    //             Continue\r\n    //           </button>\r\n    //         </Link>\r\n    //       </p>\r\n    //       <Results\r\n    //         guesses ={this.train_data.guess_stack}\r\n    //         notes   ={this.train_data.note_stack}\r\n    //         results ={this.train_data.result_stack}\r\n    //         score   ={this.train_data.calcScore()}\r\n    //       />\r\n    //     </header>\r\n    //     );\r\n    // }\r\n    return (<p>Error displaying user interface!</p>);\r\n  }\r\n}\r\n\r\nexport default TrainingSession;\r\nexport {TrainingData, TrainingSession};","// import React from 'react';\r\nimport { Synth } from 'tone';\r\n\r\nvar synth = new Synth().toMaster();\r\nvar note_arr = ['C', 'C#','D', 'Eb','E','F', 'F#','G', 'Ab', 'A', 'Bb', 'B', ];\r\n\r\nclass ToneGen {\r\n\r\n  // constructor() {\r\n  //   // super(props);\r\n  //   // this.state = {\r\n  //   //   mode: props.mode, \r\n  //   //   message: 'You Played: '\r\n  //   // };\r\n\r\n  //   // this.handleClick = this.handleClick.bind(this);\r\n  //   this.random_note = this.random_note.bind(this);\r\n  //   this.play_note = this.play_note.bind(this);\r\n  //   this.play_note_button = this.play_note_button.bind(this);\r\n  //   this.play_rand_note = this.play_rand_note.bind(this);\r\n  //   this.guess_note_button = this.guess_note_button.bind(this);\r\n  //   // this.last_guess = this.last_guess.bind(this);\r\n  //   // this.guess_output = this.guess_output.bind(this);\r\n  // }\r\n\r\n  // componentDidMount() {\r\n  //   if (this.state.mode === 'guess') {\r\n  //     this.setState({\r\n  //       message: 'You Guessed: '\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  // handleClick(name) {\r\n  //   if (this.state.mode === 'play') {\r\n  //     this.play_note_button(name);\r\n  //   }\r\n  //   else if (this.state.mode === 'guess') {\r\n  //     this.guess_note_button(name);\r\n  //   }\r\n  // }\r\n  \r\n  random_note() {\r\n    // 4 = octave\r\n    // TODO: refactor into a property\r\n    // TODO: make this configurable from settings\r\n    return note_arr[Math.floor(Math.random() * note_arr.length)] + '4';\r\n  }\r\n\r\n  play_note(note) {\r\n    console.log(note);\r\n    //play the note for the duration of an quarter note\r\n    synth.triggerAttackRelease(note, '4n');\r\n  }\r\n\r\n  play_note_button(note) {\r\n    this.play_note(note+'4')\r\n    // if (this.state.mode === 'play') {\r\n    //   this.props.onGuessChange(note)\r\n    // }\r\n    // else {\r\n    //   this.props.onNoteChange(note)\r\n    // }\r\n  }\r\n\r\n  play_rand_note() {\r\n    var note = this.random_note();\r\n    // if (this.state.mode === 'play') {\r\n    //   this.props.onGuessChange(note)\r\n    // }\r\n    // else {\r\n    //   this.props.onNoteChange(note)\r\n    // }\r\n    this.play_note(note);\r\n    return note;\r\n  }\r\n  \r\n  // guess_note_button(note) {\r\n  //   note = note + '4';\r\n  //   // this.props.onGuessChange(note);\r\n  // }\r\n\r\n  // render() {\r\n  //   return;\r\n  //   // return(\r\n  //   // <div>\r\n  //   //   <NoteButtons handleClick={this.handleClick}/>\r\n  //   //   <button className=\"App-button colorYellow\" onClick={this.play_rand_note}>\r\n  //   //     {this.props.b_name}\r\n  //   //   </button>\r\n  //   //   <p>{this.state.message}</p>\r\n  //   // </div>);\r\n  // }\r\n}\r\n\r\nexport default ToneGen;","import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport ToneGen from './ToneGenerator.js';\r\n// import TrainingSession from './train.js';\r\n\r\nfunction NoteButton(props) {\r\n  if (props.color === 'white') {\r\n    return (\r\n      <button className=\"Note-button Note-white\" onClick={(e) => props.handleClick(props.name)}>{props.name}</button>\r\n    );\r\n  }\r\n  else if (props.color=== 'black') {\r\n    return (\r\n      <button className=\"Note-button Note-black\" onClick={(e) => props.handleClick(props.name)}>{props.name}</button>\r\n    );    \r\n  }\r\n  else {\r\n    return (\r\n      <button className=\"Note-button Blank-note\" ></button>\r\n    ); \r\n  }\r\n}\r\n\r\nfunction NoteButtons(props) {\r\n  return(\r\n  <div className=\"Note-header\">\r\n    <div>\r\n      <NoteButton color='black' name={'C#'} handleClick={props.handleClick} />\r\n      <NoteButton color='black' name={'Eb'} handleClick={props.handleClick} />\r\n      <NoteButton color='blank' />  \r\n      <NoteButton color='black' name={'F#'} handleClick={props.handleClick} />\r\n      <NoteButton color='black' name={'Ab'} handleClick={props.handleClick} />\r\n      <NoteButton color='black' name={'Bb'} handleClick={props.handleClick} />\r\n    </div>\r\n    <div>\r\n      <NoteButton color='white' name={'C'} handleClick={props.handleClick} />\r\n      \r\n      <NoteButton color='white' name={'D'} handleClick={props.handleClick} />\r\n      \r\n      <NoteButton color='white' name={'E'} handleClick={props.handleClick} />\r\n      <NoteButton color='white' name={'F'} handleClick={props.handleClick} />\r\n      \r\n      <NoteButton color='white' name={'G'} handleClick={props.handleClick} />\r\n      \r\n      <NoteButton color='white' name={'A'} handleClick={props.handleClick} />\r\n      \r\n      <NoteButton color='white' name={'B'} handleClick={props.handleClick} />\r\n   </div>\r\n  </div>\r\n  );\r\n}\r\n\r\n\r\nclass Piano extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mode: props.mode,\r\n      note: '',\r\n      guess: ''\r\n    };\r\n    this.handleGuess = this.handleGuess.bind(this);\r\n    this.handlePlay = this.handlePlay.bind(this);\r\n    this.handleNext = this.handleNext.bind(this);\r\n    this.handleRnd = this.handleRnd.bind(this);\r\n\r\n    this.toneGen = new ToneGen();\r\n  }\r\n\r\n  handleGuess(note) {\r\n    this.props.onGuessChange(note+'4');\r\n  }\r\n\r\n  handlePlay(note) {\r\n    this.toneGen.play_note_button(note);\r\n    this.props.onNoteChange(note+'4');\r\n  }\r\n\r\n  handleNext() {\r\n    this.props.onNoteChange(this.toneGen.play_rand_note());\r\n  }\r\n\r\n  handleRnd() {\r\n    this.props.onNoteChange(this.toneGen.play_rand_note());\r\n  }\r\n\r\n  render() {\r\n    var button_click;\r\n    var message;\r\n    var next;\r\n    var next_message;\r\n    var note;\r\n    if (this.props.mode === 'guess') {\r\n      button_click = this.handleGuess;\r\n      message = \"You Guessed: \";\r\n      next = this.handleNext;\r\n      next_message = \"Play Next\";\r\n      note = this.props.guess;\r\n    }\r\n    else {\r\n      button_click = this.handlePlay;\r\n      message = \"Note Played:\";\r\n      next = this.handleRnd;\r\n      next_message = \"Random Note\";\r\n      note = this.props.note;\r\n    }\r\n    return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n    //     <h1>Training</h1>\r\n        // <p>\r\n        //   <Link to='/'>\r\n        //     <button className=\"App-button colorGreen\">Stop</button>\r\n        //   </Link>\r\n        //   <Link to='/settings'>\r\n        //     <button className=\"App-button colorCoral\">Settings</button>\r\n        //   </Link>\r\n        //   <Link to='/results'>\r\n        //     <button className=\"App-button colorYellow\" onClick={this.props.onResults}>\r\n        //       Results\r\n        //     </button>\r\n        //   </Link>\r\n        // </p>\r\n    //     <p>What Note Just Played?</p>\r\n        <div>\r\n          <NoteButtons handleClick={button_click} />\r\n          <button className='App-button colorYellow' onClick={next}>\r\n            {next_message}\r\n          </button>\r\n          <p>{message}</p>\r\n          <p>{note}{this.props.result}</p>\r\n        </div>\r\n  //     </header>\r\n  //   </div>\r\n  );  \r\n  }\r\n}\r\n\r\nexport default Piano;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './App.css';\r\n\r\n\r\nfunction Settings() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Settings</h1>\r\n      <p>\r\n        <NavLink to='/'>\r\n          <button className=\"App-button colorGreen\">Home</button>\r\n        </NavLink>\r\n        <NavLink to='/train'>\r\n          <button className=\"App-button colorCoral\">Start Training</button>\r\n        </NavLink>\r\n      </p>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\nimport { Link, Switch, Route } from 'react-router-dom';\n\nimport './App.css';\n\nimport {TrainingData, TrainingSession} from './train.js';\nimport Piano from './piano.js';\nimport Results from './results.js';\nimport Settings from './settings.js';\n\nvar train_data = new TrainingData();\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: 'play'\n    };\n    train_data = new TrainingData();\n    this.setMode=this.setMode.bind(this);\n  }\n  setMode(mode) {\n    this.setState({mode: mode});\n  }\n  onPlay() {\n    train_data = new TrainingData();\n    this.setMode('play');\n  }\n  onStart() {\n    train_data = new TrainingData();\n    this.setMode('guess');\n  }\n  onContinue() {\n    this.setMode('guess');\n  }\n  onResults() {\n    this.setMode('results');\n  }\n  render() {\n    if (this.state.mode === 'play') {\n      return(\n        <PlayView \n          onStart={this.onStart}\n          setMode={this.setMode}\n        />\n      );\n    }\n    else if (this.state.mode === 'guess') {\n      return(\n        <TrainView \n          onPlay={this.onPlay}\n          onResults={this.onResults}\n          setMode={this.setMode}\n          train_data={this.UNSAFE_componentWillMount.train_data}\n        />\n      );\n    }\n    else if (this.state.mode === 'results') {\n      return(\n        <ResultsView\n          train_data={train_data}\n        />\n      )\n    }\n  }\n}\n\nfunction PlayView (props) {\n  return(\n  <header className=\"App App-header\">\n    <h1>Aural Training</h1> \n    <p>\n      <Link to='/train'>\n        <button className=\"App-button colorGreen\">\n        Start\n        </button>\n      </Link>\n      <Link to='/settings'>\n        <button className=\"App-button colorCoral\">Settings</button>\n      </Link>\n    </p>\n    <p>Play a note!</p>\n    <TrainingSession \n      mode='play'\n      ui={Piano}\n      setMode={props.setMode}\n    />\n  </header>\n  )\n}\n\nfunction TrainView (props) {\n  return (\n  <header className=\"App App-header\">\n  <h1>Aural Training</h1> \n  <p>\n    <Link to='/'>\n      <button className=\"App-button colorGreen\">Stop</button>\n    </Link>\n    <Link to='/settings'>\n      <button className=\"App-button colorCoral\">Settings</button>\n    </Link>\n    <Link to='/results'>\n      <button className=\"App-button colorYellow\">\n        Results\n      </button>\n    </Link>\n  </p>\n  <p>What Note Just Played?</p>\n  <TrainingSession \n      mode='guess'\n      ui={Piano}\n      setMode={props.setMode}\n      train_data={train_data}\n    />\n  </header>\n  );\n}\n\nfunction ResultsView (props) {\n  // var train_data;\n  // var onPlay;\n  // if (props.train_data == null) \n  //   train_data = new TrainingData();\n  // else\n  //   train_data = props.train_data;\n  return (\n    <header className=\"App App-header\">\n    <h1>Results</h1> \n    <p>\n      <Link to='/'>\n        <button className=\"App-button colorGreen\">Start Over</button>\n      </Link>\n      <Link to='/settings'> \n        <button className=\"App-button colorCoral\">Settings</button>\n      </Link>\n      <Link to='/train'>\n        <button className=\"App-button colorYellow\">\n          Continue\n        </button>\n      </Link>\n    </p>\n      <Results \n        guesses ={train_data.guess_stack}\n        notes   ={train_data.note_stack}\n        results ={train_data.result_stack}\n        score   ={train_data.calcScore()}\n      />\n    </header>\n  );\n}\n\n\nconst Main = () => (\n  <Switch>\n    <Route exact path='/'         component={App}></Route>\n    <Route exact path='/train'    component={TrainView}></Route>\n    <Route exact path='/settings' component={Settings}></Route>\n    <Route exact path='/results'  component={ResultsView}></Route>\n  </Switch>\n);\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n  ), document.getElementById('root')\n);\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}